			CLONE DE STARBUCKS CON REDUX-FIREBASE + FRAMER-MOTION

Video: https://www.youtube.com/watch?v=OXkqfbmePDA&t=291s&ab_channel=ILWYennefer
Repo: 
Crearemos un clon de starbucks,usaremos react-hooks-form para el formulario y Firebase como BaaS.Será un diseño responsive
Usaré react-awesome-reveal para scrollear con fadeIn.
Usaré la framer Motion API para animaciones
Usaremos @redux/toolkit para el state management.Puedo usar su starter,tanto para JS como para TS:

# Redux + Plain JS template
npx create-react-app my-app --template redux

# Redux + TypeScript template
npx create-react-app my-app --template redux-typescript

Instalo el que quiera y puedo ir creando un proyecto en Firebase.Vamos a añadir las dependencias,lo mejor será seguir con las que usó él.

Fijate que al usar css puro es buena idea usar BEM,intenta darte cuenta del sindrome del impostor

En cuanto a la impl de react-awesome-reveal no puede ser más fácil:
import { Fade } from "react-awesome-reveal";
  <Fade>
    <Footer />
  </Fade>
Obviamente hay muchas cosas por configurar como props en <Fade>

		INTRO A FRAMER MOTION API MINUTO 37

Esta libreria ofrece ejemplos para animaciones,transformaciones,gestos,...
Tiene una buena documentación y puedo abrir los ejemplos en sandbox.
Realmente es bastante extensa,aunque tiene buen soporte para TS,ver proyecto.
Recuerda que en Material UI se cambia el tamaño del icono con fontSize y que son un Componente en sí,asi que puedo retornarlos,etc:
 {goBackIcon && <ChevronLeftRoundedIcon fontSize="large" />}
  {link}
 {icon && <ChevronRightRoundedIcon fontSize="large" />}

			 ELEMENTOS EN LINEA CONTRA BLOQUE

EN LINEA:
Explicandolo de manera sencilla,ciertas etiquetas HTML no afectán en absoluto al flujo de los demás elementos,limitándose a marcar ciertos elementos con una determinada semántica y dejando que el texto y otros elementos contigüos sigan fluyendo en la misma línea(bloque) colocandose a ambos lados de dicho elemento.Resumen:se colocan a los lados.
Ejemplos son las etiquetas <a>,<em><del>,<span>.
A estos elementos se les llama elements en linea

IMPORTANTE: en los elementos en linea no se respetan LOS ANCHOS,LOS ALTOS NI LOS MÁRGENES VERTICALES

EN BLOQUE:
Por el contrario,ciertas etiquetas se renderizan en el navegador en líneas independientes,no mezcladas con el resto del texto.Como ejemplos los headings,los div,los p,etc.
NOTA:LOS ELEMENTOS DE BLOQUE SI RESPETAN LOS ANCHOS,ALTOS Y MARGENES VERTICALES,A DIFERENCIA DE LOS INLINE

INLINE-BLOCK:
es posible mezclar ambas disposiciones aplicando css y la propiedad display.Hay un tercer valor que es mezcla de ambos,asi usar la disposición inline-block hara que el elemento respete los anchos,altos y margenes(pero no ocupa la linea entera,ojo).Como puedo ver combina los dos anteriores,básicamente es un elemento inline que respetará anchos,altos y margenes verticales

TIP: También puedo ver a display:inline-block como un display:block pero que no añade el salto de linea al final del elemento,pudiendo meter más en la misma linea

Ahora si,ya entiendo porque poner al <Link> en inline-block,ya que respetará alturas,anchos,margenes pero además me permite meter más en la misma linea.Genial.

Fijate el componente Featured que bonito lo hizo y como le ha pasado hasta el color del background,el color del texto,la imagen o la className,realmente React es muy buena elección para esto:

    <Featured
       title="PISTACHIOOOOOOO"
       info="Embrace creamy coffee bliss with our new Pistachio Latte and Pistachio Frappuccino® blended beverage."
       link="Try the new pistachio drinks"
       path=""
       image="https://content-prod-live.cert.starbucks.com/binary/v2/asset/137-67826.png"
       order="2"
       background="#f0ebe0"
       color="#1e3932"
       className="featured__hoverLight"
 />

Incluso le va a mandar el order.Amazing.Fijate que también usamos otro componente Info.Son muy parecidos,pero uno ocupa el 100% del ancho y el otro el 50%.
2h23
Fijate de nuevo como puedo pasar un color para el background a un componente:
<Featured 
  background="#34ffe2"

Y luego cuando lo reciba lo mando en un style inline:
<div style={{background}} <- fijate que me viene "#34ffe2

Lo mismo para el order y el color.Muy pro:
<div className="featured__left" style={{ order, color }}>

Es importante dar un valor a alt si quiero mejorar el SEO.
<img src={image} alt={title} /> <- supongo que laboralmente debo usarlo.

Fijate de nuevo que facil es crear varios componentes que reciban el color y el fondo por props:
    <div
       className="info"
       style={{
         color,
          background,
     }}
     >
   fijate que el ContentPlaceholder es el contenido del acordeón.

IMPORTANTE: toda website moderna debe tener el icono para mostrar/ocultar la password.Fijate que realmente simplemente consiste en cambiar el type del input(de text a password)No tiene más ciencia,declaro un state,declaro un input type condicionalmente y en cada click sobre el icono lo invierto:

const [passwordShown, setPasswordShown] = useState(false);

 <input  type={passwordShown ? "text" : "password"}  <- esto es la clave,asinto,fijate
 Le meto unos iconos apropiados,etc...:
  {/* toggleVisibility for password */}
   {passwordShown ? ( <VisibilityOutlinedIcon
     onClick={() => setPasswordShown(!passwordShown)}
     className="loginScreen__visibilityIcon"
    />
   ) : (
   <VisibilityOffOutlinedIcon
    onClick={() => setPasswordShown(!passwordShown)}
    className="loginScreen__visibilityIcon"
    />
  )}

IMPORTANTE: para una mejora en la validación de react-hooks-form puedo pasarle un schema con Yup:
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from "yup";

interface IFormInputs {
  firstName: string
  age: number
 }

 const schema = yup.object({
   firstName: yup.string().required(),
   age: yup.number().positive().integer().required(),
  }).required();

const { register, handleSubmit, formState: { errors } } = useForm<IFormInputs>({
  resolver: yupResolver(schema)
  });
Simplemente hay que pasarle el schema a la propiedad resolver al iniciar el hook(que obviamente es todo el formulario).
Se imprimen los errores con la propiedad message:
<p>{errors.age?.message}</p>
Recuerda que puedo targetear a una clase de Material UI como por ejemplo la que usará cualquier icono:

.loginScreen__error > .MuiSvgIcon-root {
  color: #e75b52;
  }

  Fijate,cuando tenga varias transiciones lo mejor es usar la propiedad transition-property y listarlas separadas por comas:
 transition-duration: 0.2s;
 transition-property: transform, box-shadow, width, height;
 transition-timing-function: ease;
 Obviamente tengo que usar transition-timing-function también.Genial.

			SETTING FIREBASE AND CUSTOM AUTH

EStablecer el módulo Auth no puede ser más fácil:
import firebase from firebase;
const firebaseConfig = { ..}
const firebaseApp= firebase.initializeApp(firebaseConfig).
const firebaseAuth= firebaseApp.auth()
export { firebaseAuth} <- lógicamente esto es para la v8 pero la clave es que firebaseAuth se apoyará en firebaseApp,ojo,en la instancia ya configurada en la linea anterior.
Fijate que hasta ahora he usado siempre gap pero realmente puedo fragmentarlo en column-gap y row-gap si quisiera
Mas o menos fue continuar con todo,realmente no es una web muy difícil.IMportante entender que fue buena práctica,siempre es buena práctica.

